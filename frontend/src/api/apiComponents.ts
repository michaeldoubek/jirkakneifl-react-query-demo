/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { useApiContext, ApiContext } from './apiContext';
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';

export type AppControllerListPostsError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerListPostsResponse = Schemas.PostResponse[];

export type AppControllerListPostsVariables = ApiContext['fetcherOptions'];

export const fetchAppControllerListPosts = (
  variables: AppControllerListPostsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    AppControllerListPostsResponse,
    AppControllerListPostsError,
    undefined,
    {},
    {},
    {}
  >({ url: '/', method: 'get', ...variables, signal });

export const useAppControllerListPosts = <
  TData = AppControllerListPostsResponse,
>(
  variables: AppControllerListPostsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppControllerListPostsResponse,
      AppControllerListPostsError,
      TData
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    AppControllerListPostsResponse,
    AppControllerListPostsError,
    TData
  >(
    queryKeyFn({ path: '/', operationId: 'appControllerListPosts', variables }),
    ({ signal }) =>
      fetchAppControllerListPosts({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AppControllerCreatePostError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerCreatePostVariables = {
  body: Schemas.PostDto;
} & ApiContext['fetcherOptions'];

export const fetchAppControllerCreatePost = (
  variables: AppControllerCreatePostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PostResponse,
    AppControllerCreatePostError,
    Schemas.PostDto,
    {},
    {},
    {}
  >({ url: '/', method: 'post', ...variables, signal });

export const useAppControllerCreatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PostResponse,
      AppControllerCreatePostError,
      AppControllerCreatePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PostResponse,
    AppControllerCreatePostError,
    AppControllerCreatePostVariables
  >(
    (variables: AppControllerCreatePostVariables) =>
      fetchAppControllerCreatePost({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AppControllerGetPostPathParams = {
  id: string;
};

export type AppControllerGetPostError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetPostVariables = {
  pathParams: AppControllerGetPostPathParams;
} & ApiContext['fetcherOptions'];

export const fetchAppControllerGetPost = (
  variables: AppControllerGetPostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PostResponse,
    AppControllerGetPostError,
    undefined,
    {},
    {},
    AppControllerGetPostPathParams
  >({ url: '/{id}', method: 'get', ...variables, signal });

export const useAppControllerGetPost = <TData = Schemas.PostResponse>(
  variables: AppControllerGetPostVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.PostResponse,
      AppControllerGetPostError,
      TData
    >,
    'queryKey' | 'queryFn'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.PostResponse,
    AppControllerGetPostError,
    TData
  >(
    queryKeyFn({
      path: '/{id}',
      operationId: 'appControllerGetPost',
      variables,
    }),
    ({ signal }) =>
      fetchAppControllerGetPost({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    },
  );
};

export type AppControllerUpdatePostPathParams = {
  id: string;
};

export type AppControllerUpdatePostError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerUpdatePostVariables = {
  body: Schemas.PostDto;
  pathParams: AppControllerUpdatePostPathParams;
} & ApiContext['fetcherOptions'];

export const fetchAppControllerUpdatePost = (
  variables: AppControllerUpdatePostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PostResponse,
    AppControllerUpdatePostError,
    Schemas.PostDto,
    {},
    {},
    AppControllerUpdatePostPathParams
  >({ url: '/{id}', method: 'put', ...variables, signal });

export const useAppControllerUpdatePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PostResponse,
      AppControllerUpdatePostError,
      AppControllerUpdatePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.PostResponse,
    AppControllerUpdatePostError,
    AppControllerUpdatePostVariables
  >(
    (variables: AppControllerUpdatePostVariables) =>
      fetchAppControllerUpdatePost({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type AppControllerDeletePostPathParams = {
  id: string;
};

export type AppControllerDeletePostError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerDeletePostVariables = {
  pathParams: AppControllerDeletePostPathParams;
} & ApiContext['fetcherOptions'];

export const fetchAppControllerDeletePost = (
  variables: AppControllerDeletePostVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    AppControllerDeletePostError,
    undefined,
    {},
    {},
    AppControllerDeletePostPathParams
  >({ url: '/{id}', method: 'delete', ...variables, signal });

export const useAppControllerDeletePost = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AppControllerDeletePostError,
      AppControllerDeletePostVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    AppControllerDeletePostError,
    AppControllerDeletePostVariables
  >(
    (variables: AppControllerDeletePostVariables) =>
      fetchAppControllerDeletePost({ ...fetcherOptions, ...variables }),
    options,
  );
};

export type QueryOperation =
  | {
      path: '/';
      operationId: 'appControllerListPosts';
      variables: AppControllerListPostsVariables;
    }
  | {
      path: '/{id}';
      operationId: 'appControllerGetPost';
      variables: AppControllerGetPostVariables;
    };
